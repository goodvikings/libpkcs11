/*
 * ------------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <ramo@goodvikings.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return - Ramo
 * ------------------------------------------------------------------------------
 */

#include <iostream>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <iomanip>
#include "p11.h"
using namespace std;

unsigned char iv[] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

unsigned char cert[] ={
	0x30, 0x82, 0x04, 0xC6, 0x30, 0x82, 0x02, 0xAE,
	0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x15,
	0x80, 0x53, 0xC9, 0x58, 0x10, 0x23, 0xE2, 0x0B,
	0xF8, 0xDD, 0x8E, 0x46, 0x4F, 0x33, 0xA5, 0x74,
	0x24, 0x3D, 0xDC, 0x30, 0x0D, 0x06, 0x09, 0x2A,
	0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05,
	0x05, 0x00, 0x30, 0x3A, 0x31, 0x0B, 0x30, 0x09,
	0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41,
	0x55, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55,
	0x04, 0x0A, 0x0C, 0x03, 0x47, 0x53, 0x53, 0x31,
	0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x0B,
	0x0C, 0x04, 0x76, 0x35, 0x2E, 0x34, 0x31, 0x0E,
	0x30, 0x0C, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C,
	0x05, 0x73, 0x75, 0x62, 0x43, 0x41, 0x30, 0x1E,
	0x17, 0x0D, 0x31, 0x34, 0x30, 0x31, 0x31, 0x34,
	0x30, 0x31, 0x32, 0x39, 0x35, 0x35, 0x5A, 0x17,
	0x0D, 0x32, 0x39, 0x30, 0x31, 0x30, 0x37, 0x30,
	0x33, 0x32, 0x36, 0x33, 0x38, 0x5A, 0x30, 0x3A,
	0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
	0x06, 0x13, 0x02, 0x41, 0x55, 0x31, 0x0C, 0x30,
	0x0A, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x03,
	0x56, 0x7A, 0x42, 0x31, 0x0C, 0x30, 0x0A, 0x06,
	0x03, 0x55, 0x04, 0x0B, 0x0C, 0x03, 0x52, 0x41,
	0x4F, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55,
	0x04, 0x03, 0x0C, 0x06, 0x73, 0x75, 0x62, 0x52,
	0x52, 0x4F, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D,
	0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D,
	0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01,
	0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82,
	0x01, 0x01, 0x00, 0xD8, 0xFD, 0x7E, 0x82, 0x49,
	0x91, 0xA6, 0xF3, 0x8A, 0x27, 0x23, 0x3E, 0xE4,
	0x9B, 0x28, 0x20, 0x97, 0x98, 0x5F, 0x65, 0x71,
	0xD2, 0x18, 0x3A, 0x88, 0xE2, 0x43, 0xF1, 0x02,
	0xC8, 0xDB, 0xDE, 0x2B, 0x08, 0xB4, 0x57, 0x54,
	0xA6, 0x7D, 0x30, 0x84, 0x9C, 0xAB, 0x24, 0x71,
	0x18, 0x55, 0x01, 0x67, 0x81, 0x80, 0xEC, 0xBD,
	0xE1, 0x85, 0x7C, 0x3E, 0x97, 0xA9, 0xF3, 0x39,
	0x3F, 0x6A, 0x02, 0xBE, 0x2C, 0xBA, 0xCA, 0x35,
	0xC1, 0xA0, 0x61, 0x28, 0x75, 0x21, 0x60, 0x8A,
	0x95, 0x20, 0x0D, 0xE9, 0xD2, 0xB6, 0x17, 0xA6,
	0xA8, 0x81, 0x02, 0x15, 0x6F, 0x27, 0x35, 0xE3,
	0x20, 0xFB, 0xB6, 0xD5, 0x2F, 0xC7, 0xDB, 0x31,
	0x98, 0xFE, 0x98, 0x99, 0xFD, 0x7B, 0xA0, 0x97,
	0x82, 0xD9, 0x82, 0x1A, 0xD6, 0x52, 0xB8, 0xF8,
	0x8F, 0x89, 0x76, 0x41, 0x06, 0x19, 0x4E, 0xDB,
	0xA1, 0x1D, 0x91, 0x9E, 0x8A, 0x9B, 0x90, 0x30,
	0xCF, 0x1E, 0x84, 0xCC, 0xB7, 0xB9, 0x69, 0x6A,
	0x6D, 0xE1, 0xF0, 0x49, 0x09, 0x90, 0xC8, 0xB1,
	0x95, 0x00, 0x2F, 0x91, 0x1C, 0x02, 0x8B, 0x08,
	0xF9, 0xF6, 0xC6, 0x16, 0xD5, 0xFD, 0xB1, 0xAA,
	0x3D, 0xCE, 0x87, 0x85, 0x17, 0xC7, 0x7D, 0xBB,
	0xBE, 0x3F, 0xD0, 0xFF, 0xDD, 0x8C, 0x82, 0xF5,
	0x29, 0x37, 0xAF, 0x23, 0xD2, 0xCA, 0xEC, 0x7C,
	0xD5, 0x80, 0x3B, 0x25, 0xE2, 0xB3, 0x48, 0x7E,
	0xD3, 0xA3, 0xA1, 0xB2, 0x90, 0x57, 0xEB, 0xDB,
	0x68, 0x8A, 0x74, 0x04, 0x73, 0x2D, 0x25, 0x71,
	0x16, 0x1D, 0x67, 0xF2, 0x66, 0x26, 0xC9, 0x2E,
	0x75, 0x63, 0x64, 0x07, 0xA9, 0xBC, 0x21, 0x3D,
	0x33, 0x7A, 0x55, 0x69, 0xD4, 0x3B, 0xAA, 0x44,
	0x11, 0xEC, 0x03, 0x94, 0x72, 0x35, 0x16, 0xD3,
	0x85, 0x95, 0xBE, 0x2C, 0x99, 0x3F, 0x1E, 0x89,
	0x6D, 0x0C, 0xE9, 0x02, 0x03, 0x01, 0x00, 0x01,
	0xA3, 0x81, 0xC3, 0x30, 0x81, 0xC0, 0x30, 0x17,
	0x06, 0x08, 0x2A, 0x82, 0x74, 0xBB, 0xE8, 0x21,
	0x03, 0x01, 0x04, 0x0B, 0x06, 0x09, 0x2A, 0x82,
	0x74, 0xBB, 0xE8, 0x21, 0x03, 0x01, 0x15, 0x30,
	0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01,
	0xFF, 0x04, 0x04, 0x03, 0x02, 0x05, 0xE0, 0x30,
	0x76, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x6F,
	0x30, 0x6D, 0x80, 0x14, 0x3F, 0xE9, 0x4E, 0x20,
	0x98, 0x45, 0x90, 0x7B, 0xAF, 0xFE, 0x2F, 0x2D,
	0xF7, 0x13, 0x02, 0xB5, 0x76, 0xA8, 0x65, 0xC7,
	0xA1, 0x3F, 0xA4, 0x3D, 0x30, 0x3B, 0x31, 0x0B,
	0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
	0x02, 0x41, 0x55, 0x31, 0x0C, 0x30, 0x0A, 0x06,
	0x03, 0x55, 0x04, 0x0A, 0x0C, 0x03, 0x47, 0x53,
	0x53, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55,
	0x04, 0x0B, 0x0C, 0x04, 0x76, 0x35, 0x2E, 0x34,
	0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04,
	0x03, 0x0C, 0x06, 0x72, 0x6F, 0x6F, 0x74, 0x43,
	0x41, 0x82, 0x14, 0x02, 0xF5, 0xC7, 0x55, 0xD0,
	0xCE, 0x9C, 0x37, 0x45, 0xFE, 0xA2, 0xAF, 0xEA,
	0x17, 0x21, 0x71, 0x23, 0x46, 0x7B, 0x7D, 0x30,
	0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16,
	0x04, 0x14, 0x0B, 0xA5, 0xBA, 0x87, 0xD1, 0xDC,
	0x04, 0xC3, 0xBE, 0x70, 0x21, 0xC6, 0x2F, 0xE7,
	0xAF, 0x3D, 0x2C, 0x51, 0xEA, 0xDE, 0x30, 0x0D,
	0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D,
	0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x02,
	0x01, 0x00, 0x5F, 0x74, 0xC0, 0x14, 0x97, 0x64,
	0x13, 0x33, 0xE6, 0x28, 0xF9, 0x05, 0x62, 0xA5,
	0x3F, 0x47, 0x35, 0xA6, 0x4B, 0x81, 0xDD, 0xC8,
	0xDE, 0x05, 0xBA, 0x8D, 0x6A, 0xE5, 0x8E, 0x7A,
	0x55, 0x04, 0xAE, 0x07, 0x22, 0x05, 0x1B, 0x60,
	0xBD, 0x36, 0x4A, 0xD0, 0x6C, 0x03, 0xB4, 0x2E,
	0xF5, 0xDD, 0x87, 0xC9, 0xDD, 0x80, 0xDD, 0xF2,
	0x53, 0x08, 0xB4, 0x15, 0xE6, 0xCC, 0x3A, 0x02,
	0x96, 0x2D, 0xFD, 0xED, 0xE3, 0xB3, 0xB4, 0xE5,
	0x79, 0xBF, 0x90, 0xF0, 0x6F, 0x14, 0x28, 0x33,
	0x01, 0x3F, 0xE5, 0x9E, 0xD0, 0x44, 0x23, 0xE5,
	0x4A, 0xF1, 0xBB, 0x13, 0xFF, 0x6B, 0xD3, 0x6B,
	0xD7, 0xB7, 0x90, 0x6C, 0x2C, 0x22, 0x7C, 0x5F,
	0x9B, 0x9A, 0x47, 0x0C, 0x69, 0xA3, 0x71, 0xE5,
	0x96, 0x25, 0x93, 0x04, 0x18, 0xF3, 0x3A, 0x66,
	0x21, 0xFB, 0x21, 0xDE, 0x27, 0x73, 0xB3, 0xD5,
	0xA9, 0x44, 0x85, 0xA9, 0x13, 0x34, 0xEB, 0x90,
	0xE9, 0x30, 0xD8, 0xA8, 0xB1, 0x2E, 0x89, 0x8A,
	0x20, 0x1C, 0x3F, 0xDD, 0x3F, 0xC7, 0xCD, 0x2C,
	0x1B, 0xA0, 0x77, 0x25, 0x78, 0xB8, 0x9D, 0x25,
	0x62, 0xEF, 0xA2, 0x07, 0x30, 0x88, 0x59, 0x34,
	0x74, 0x55, 0xC0, 0xB5, 0xCA, 0xFC, 0x6E, 0xC6,
	0xCA, 0x30, 0x3C, 0x1C, 0xAC, 0x54, 0xCC, 0x2C,
	0x89, 0xCE, 0x85, 0x38, 0xCD, 0x62, 0x4D, 0x63,
	0x42, 0xB2, 0x34, 0x4C, 0x73, 0x86, 0xAB, 0x8D,
	0xA3, 0x4F, 0x32, 0x47, 0xDB, 0xBB, 0xA2, 0x28,
	0x76, 0x62, 0xA6, 0xDE, 0x37, 0x91, 0x31, 0xD6,
	0x53, 0x67, 0x17, 0x01, 0x62, 0x69, 0xB7, 0x98,
	0x78, 0xA8, 0xC6, 0x31, 0xDB, 0xC1, 0xB8, 0xAB,
	0x03, 0x0C, 0xD3, 0xD1, 0xD4, 0xBE, 0xED, 0x8D,
	0x85, 0xF0, 0xF4, 0xCB, 0xA6, 0xC5, 0x0A, 0x62,
	0x53, 0x0B, 0xFB, 0x06, 0x96, 0x7D, 0x5F, 0x7A,
	0xEB, 0x23, 0x8B, 0xF4, 0x45, 0xCC, 0x8A, 0x31,
	0xA6, 0xC9, 0x25, 0x59, 0xC6, 0xC1, 0x35, 0x52,
	0xA7, 0x98, 0x33, 0xCB, 0x53, 0x7E, 0x70, 0xB9,
	0x23, 0x3F, 0xC7, 0xD0, 0xBF, 0x3E, 0x13, 0x55,
	0x80, 0x14, 0xC1, 0x7F, 0x2F, 0x44, 0x4B, 0x78,
	0xB7, 0xBF, 0x6D, 0xBF, 0x0E, 0x22, 0x36, 0x94,
	0xEE, 0xBF, 0xB5, 0x5E, 0x8A, 0x53, 0x2C, 0x84,
	0x91, 0xFB, 0x48, 0x8E, 0xBD, 0xC9, 0xAE, 0x4C,
	0x19, 0x29, 0xA9, 0xA9, 0x9B, 0x57, 0x83, 0x2A,
	0x69, 0x04, 0x20, 0x9A, 0x72, 0xF4, 0x6A, 0x36,
	0xF1, 0x03, 0x65, 0xC6, 0xDC, 0x15, 0xC7, 0x02,
	0x09, 0x30, 0x7B, 0x4B, 0x20, 0xE5, 0xF2, 0xED,
	0xA3, 0x0E, 0x27, 0x8A, 0x0E, 0x22, 0x8A, 0x31,
	0xED, 0x4D, 0x29, 0x19, 0x71, 0x89, 0x86, 0x7A,
	0x08, 0x71, 0xC5, 0x3A, 0xAF, 0xE0, 0xC5, 0xD9,
	0x3D, 0x00, 0xE1, 0x43, 0x55, 0x45, 0xA3, 0x9D,
	0xD5, 0x21, 0x5B, 0xBD, 0x78, 0x96, 0xF4, 0x37,
	0x0A, 0xFB, 0x28, 0x17, 0xAD, 0x6A, 0x16, 0x27,
	0x55, 0x23, 0x31, 0x61, 0x09, 0xD9, 0xF4, 0xF0,
	0xA7, 0x88, 0x36, 0x47, 0x33, 0x1D, 0x90, 0x23,
	0xCE, 0x2B, 0xEA, 0x79, 0xD7, 0x5D, 0xF9, 0xB0,
	0x46, 0x38, 0xFE, 0x7E, 0x04, 0x8F, 0xBB, 0x51,
	0x64, 0x58, 0x24, 0x62, 0x09, 0x7E, 0x21, 0xCA,
	0x9B, 0xEF, 0x27, 0xBA, 0xA9, 0x3D, 0x0E, 0x15,
	0x0F, 0x17, 0xC6, 0xA6, 0x05, 0xFC, 0x13, 0xDF,
	0x7E, 0x6A, 0x99, 0x4E, 0x46, 0x34, 0x3E, 0xB8,
	0x2E, 0xC3, 0x38, 0xB1, 0x9C, 0xB7, 0x44, 0x00,
	0x7C, 0xD6, 0x74, 0x1D, 0xD0, 0x66, 0x2D, 0xB8,
	0x64, 0xF1, 0x27, 0x94, 0xC6, 0x84, 0xC3, 0xA0,
	0x97, 0x4C, 0x6C, 0x26, 0x24, 0x97, 0xBF, 0x36,
	0xAD, 0x15, 0x3A, 0xDB, 0x41, 0x44, 0xAF, 0xC9,
	0x5A, 0x61, 0x18, 0x2B, 0x0C, 0xE7, 0xD3, 0x38,
	0x30, 0x50
};

void generateKey(CK_SESSION_HANDLE_PTR phSession, CK_OBJECT_HANDLE_PTR pHandle);
void encrypt(CK_SESSION_HANDLE_PTR phSession, CK_OBJECT_HANDLE_PTR pHandle);
void generateKeyPair(CK_SESSION_HANDLE_PTR phSession);

int main(int argc, char** argv)
{
	unsigned long slotCount = 0;
	CK_SLOT_ID_PTR pSlotID = NULL_PTR;
	CK_SESSION_HANDLE hSession;
	CK_OBJECT_HANDLE handle = 0;

	assert(C_Initialize(NULL_PTR) == CKR_OK);
	assert(C_GetSlotList(false, pSlotID, &slotCount) == CKR_OK);

	pSlotID = new CK_SLOT_ID[slotCount];

	assert(C_GetSlotList(false, pSlotID, &slotCount) == CKR_OK);
	assert(C_OpenSession(pSlotID[0], CKF_SERIAL_SESSION | CKF_RW_SESSION, NULL, NULL, &hSession) == CKR_OK);

	assert(C_Login(hSession, CKU_USER, (unsigned char*) "11223344", 8) == CKR_OK);




	CK_OBJECT_CLASS dataClass = CKO_SECRET_KEY;
	CK_KEY_TYPE certType = CKK_DES;
	unsigned char buff[] = {"01234567"};

	CK_ATTRIBUTE dataTemplate[] ={
		{CKA_CLASS, &dataClass, sizeof (dataClass)},
		{CKA_VALUE, buff, sizeof (buff)},
		{CKA_KEY_TYPE, &certType, sizeof (certType)}
	};

	assert(C_CreateObject(hSession, dataTemplate, 3, &handle) == CKR_OK);





















	assert(C_Finalize(NULL_PTR) == CKR_OK);

	delete [] pSlotID;

	return 0;
}

void generateKey(CK_SESSION_HANDLE_PTR phSession, CK_OBJECT_HANDLE_PTR pHandle)
{
	CK_MECHANISM mech ={CKM_AES_KEY_GEN, NULL, 0};
	CK_OBJECT_CLASS objclass = CKO_SECRET_KEY;
	CK_BBOOL f = false;

	CK_ATTRIBUTE temp[] ={
		{CKA_CLASS, &objclass, sizeof (objclass)},
		{CKA_TOKEN, &f, sizeof (f)}
	};

	assert(C_GenerateKey(*phSession, &mech, temp, 2, pHandle) == CKR_OK);
}

void encrypt(CK_SESSION_HANDLE_PTR phSession, CK_OBJECT_HANDLE_PTR pHandle)
{
	const unsigned char plain[] = "The quick brown fox jumps over the lazy dog";
	CK_MECHANISM mech ={CKM_AES_CBC, (char*) iv, 16};
	unsigned long len = 80;
	unsigned char* cipherText = new unsigned char[len];
	bzero(cipherText, len);
	unsigned char* out = new unsigned char[len];
	bzero(out, len);

	assert(C_GenerateRandom(*phSession, iv, 16) == CKR_OK);

	assert(C_EncryptInit(*phSession, &mech, *pHandle) == CKR_OK);

	assert(C_Encrypt(*phSession, (unsigned char*) plain, strnlen((char*) plain, 128), cipherText, &len) == CKR_OK);

	int cipherLen = len;
	len = 80;

	assert(C_DecryptInit(*phSession, &mech, *pHandle) == CKR_OK);

	assert(C_Decrypt(*phSession, cipherText, cipherLen, out, &len) == CKR_OK);


	for (unsigned int i = 0; i < len; i++)
		cout << out[i];
	cout << endl;



	delete [] cipherText;
	delete [] out;
}

void generateKeyPair(CK_SESSION_HANDLE_PTR phSession)
{
	CK_OBJECT_HANDLE hPubKey;
	CK_OBJECT_HANDLE hPrivKey;
	CK_MECHANISM mech ={CKM_RSA_PKCS_KEY_PAIR_GEN, NULL, 0};
	CK_BBOOL t = CK_TRUE;
	CK_KEY_TYPE pubKeyType = CKK_RSA;
	CK_BYTE exp[] ={0x01, 0x00, 0x01};
	CK_ULONG modBits = 2048;

	CK_ATTRIBUTE pubTemplate[] ={
		{CKA_ENCRYPT, &t, sizeof (t)},
		{CKA_VERIFY, &t, sizeof (t)},
		{CKA_WRAP, &t, sizeof (t)},
		{CKA_KEY_TYPE, &pubKeyType, sizeof (pubKeyType)},
		{CKA_PUBLIC_EXPONENT, exp, sizeof (exp)},
		{CKA_MODULUS_BITS, &modBits, sizeof (modBits)},
		{CKA_TOKEN, &t, sizeof (t)}
	};

	CK_ATTRIBUTE privTemplate[] ={
		{CKA_PRIVATE, &t, sizeof (t)},
		{CKA_SENSITIVE, &t, sizeof (t)},
		{CKA_DECRYPT, &t, sizeof (t)},
		{CKA_SIGN, &t, sizeof (t)},
		{CKA_UNWRAP, &t, sizeof (t)},
		{CKA_TOKEN, &t, sizeof (t)}
	};

	assert(C_GenerateKeyPair(*phSession, &mech, pubTemplate, sizeof (pubTemplate) / sizeof (CK_ATTRIBUTE), privTemplate, sizeof (privTemplate) / sizeof (CK_ATTRIBUTE), &hPubKey, &hPrivKey) == CKR_OK);
}
